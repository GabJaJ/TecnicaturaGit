{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\info
{\keywords cursorLocation=81, fitsPagesWidth=1}}\paperw11900\paperh16840\margl1008\margr1008\margt1008\vieww15520\viewh14100\viewkind1\viewscale125
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl360\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 B\'e1sicamente, la sobrecarga de un operador \
significa que un mismo operador puede \
comportarse de diferentes formas.\
\
Por ejemplo, el operador de suma (+)\
\
El operador de suma es un buen ejemplo \
de la sobrecarga de operadores.\
\
Este operador se puede comportar de \
maneras distintas dependiendo si est\'e1 \
trabajando con tipos string,\
\
con tipos enteros o por ejemplo con tipos \
lista.\
\
As\'ed que dependiendo del tipo con el que \
est\'e9 trabajando, es el tipo de resultado \
que vamos a obtener.\
\
Por lo tanto, un mismo operador puede \
trabajar de distintas formas.\
\
Esto se conoce como sobrecarga de operadores.\
\
Caso 1                            Caso 2\
\
a = 2                             a = 'Hola '\
b = 3                             b = 'Mundo'\
print(a + b)                      print(a + b)\
\
En ese segundo caso, en lugar de obtener \
una suma, obtenemos una concatenaci\'f3n de \
tipos string de tipos cadena, y entonces \
con eso estamos obteniendo la sobrecarga \
del operador.\
\
Si tenemos tipos num\'e9ricos, se comporta de \
una forma, y si tenemos tipos strings se \
comporta de otra forma.\
\
Agregamos unas listas:\
\
a = [3, 4, 5]\
b = [6, 7, 8, 9]\
print(a + b)\
\
Se va a comportar de manera diferente, \
obtenemos la uni\'f3n de las dos listas,\
creando una sola.\
\
Es el mismo operador, pero dependiendo del \
tipo de dato con el que estemos trabajando \
va a ser el resultado.\
\
\
Ahora la pregunta es si esto mismo lo \
podemos hacer con clases en Python.\
\
Y la respuesta es que s\'ed, pero tenemos \
que agregar la sobrecarga de un m\'e9todo \
dependiendo del operador que queramos \
sobrecargar.\
\
Por ejemplo, esta es la lista de m\'e9todos \
seg\'fan el operador que queramos sobrecargar.\
Todos est\'e1n definidos en la clase object\
\
   Operadores Aritmeticos          magic method\
 +                            __add__(self, other)\
 -                            __sub__(self, other)\
 *                            __mul__(self, other)\
 /                            __truediv__(self, other)\
 //                           __floordiv__(self, other)\
 %                            __mod__(self, other)\
 **                           __pow__(self, other)\
\
   Operador Comparaci\'f3n (l\'f3gicos)\
 <                            __lt__(self, other)\
 >                            __gt__(self, other)\
 <=                           __le__(self, other)\
 >=                           __ge__(self, other)\
 ==                           __eq__(self, other)\
 !=                           __ne__(self, other)\
\
\
Entonces tenemos que sobreescribir el m\'e9todo \
respectivo definido en la clase Object.\
\
En ese caso, si queremos sobrecargar la suma, \
entonces tenemos que sobreescribir el m\'e9todo \
de add.\
\
Todos son m\'e9todos de tipo dunder.\
\
Esto quiere decir que est\'e1 definido en la \
clase Object.\
\
Si queremos sobrecargar el operador de resta, \
entonces tenemos que sobreescribir el m\'e9todo \
de sub.\
\
Ahora, la sobrecarga y la sobreescritura son dos \
conceptos diferentes.\
\
Recordemos que la sobrecarga de un operador \
significa que se puede comportar de maneras \
distintas dependiendo de los operandos con \
los cuales est\'e9 trabajando y la sobreescritura \
tiene que ver con herencia.\
\
As\'ed que en este caso estar\'edamos sobreescribiendo \
un m\'e9todo definido en una clase padre.\
\
As\'ed que son conceptos muy distintos.\
\
La sobrecarga de operadores y la sobreescritura \
de m\'e9todos.\
\
Operadores de asignaci\'f3n(compuestos)   magic method\
 -=                            __isub__(self, other)\
 +=                            __iadd__(self, other)\
 *=                            __imul__(self, other)\
 /=                            __idiv__(self, other)\
 //=                           __ifloordiv__(self, other)\
 %=                            __imod__(self, other)\
 **=                           __ipow__(self, other)\
\
Aqu\'ed est\'e1n todas estas tablas con todos los \
operadores que podemos sobrecargar.\
\
Por ejemplo, tenemos tambi\'e9n m\'e1s operadores, \
como pueden ser los operadores de menor que, mayor \
que, menor, igual que etc\'e9tera.\
\
Tambi\'e9n los operadores, como pueden ser operadores \
compuestos de menor, igual, mayor igual, etc\'e9tera.\
\
Y tambi\'e9n los operadores unarios con los cuales \
solamente trabajamos con un solo operando.\
\
   Operadores Unarios            magic method\
 -                             __neg__(self, other)\
 +                             __pos__(self, other)\
 ~                             __invert__(self, other)\
\
As\'ed que les voy a entregar esta tabla en caso \
de que necesiten sobrecargar alguno de estos operadores.\
\
Ya saben cu\'e1l es el m\'e9todo que tienen que \
sobreescribir de la clase Object.}